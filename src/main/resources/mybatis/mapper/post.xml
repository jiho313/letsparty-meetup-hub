<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.letsparty.mapper.PostMapper">

	<insert id="insertPost" parameterType="com.letsparty.vo.Post" useGeneratedKeys="true" keyProperty="id">
		insert into post(post_no, party_no, user_id, post_title, post_content, is_notification)
		values ((select nextval(#{party.no}) from dual), #{party.no}, #{user.id}, #{title}, #{content}, #{isNotification})
	</insert>
	
	<select id="getLastPostNoByPartyNo" parameterType="int" resultType="integer">
		SELECT post_no
		FROM post
		WHERE party_no = #{value}
		AND is_deleted = 0
		ORDER BY post_no DESC
		LIMIT 1;
	</select>
	
	<select id="getPostByPostNoAndPartyNo" resultType="Post">
		SELECT
			post_id as id,
			post_no as no,
			party_no as "party.no",
			user_id as "user.id",
			post_title as title,
			post_content as content,
			post_read_cnt as readCnt,
			post_comment_cnt as commentCnt,
			post_like_cnt as likeCnt,
			is_deleted as deleted,
			is_notification as notification,
			updated_at as updatedAt,
			created_at as createdAt
		FROM
			post
		WHERE
			party_no = #{partyNo}
		AND			
			post_no = #{postNo}
	</select>
	
	<select id="getPostNoWithCurPostNoLimit5" resultType="int">
		SELECT 
			post_no 
		FROM 
			(
			SELECT * 
			FROM 
				(SELECT * 
				FROM post 
				WHERE post_no &lt; #{postNo}
				AND is_deleted = 0
				AND party_no = #{partyNo}
				ORDER BY post_no DESC 
				LIMIT 2) a
			UNION
			SELECT * 
			FROM post 
			WHERE post_no = #{postNo}
			AND party_no = #{partyNo}
			UNION
			SELECT * 
			FROM 
				(SELECT * 
				FROM post 
				WHERE post_no &gt; #{postNo}
				AND is_deleted = 0
				AND party_no = #{partyNo}
				ORDER BY post_no ASC 
				LIMIT 2 ) b
			) c
		WHERE 
			is_deleted = 0
		ORDER BY post_no;
	</select>
	
	<select id="getSimplePostByPostNoAndPartyNo" resultType="com.letsparty.dto.SimplePostDto">
		SELECT 
			p.party_no as partyNo,
			p.post_no as postNo,
			p.post_title as title, 
			p.post_content as content, 
			p.post_comment_cnt as commentCnt, 
			p.post_read_cnt as readCnt, 
			up.profile_nickname as nickname
		FROM 
			post p
		JOIN user_party_application upa ON p.user_id = upa.user_id
		JOIN user_profile up ON upa.profile_no = up.profile_no 
		WHERE 
			p.post_no = #{postNo}
		AND 
			p.party_no = #{partyNo}
		AND 
			upa.party_no = #{partyNo};
	</select>
	
	<select id="getBeginAndEndPostNo" parameterType="int" resultType="com.letsparty.dto.BeginEndPostNo">
		SELECT 
			MAX(post_no) as endNo,
			MIN(post_no) as beginNo
		FROM 
			post
		WHERE 
			party_no = #{value}
		AND 
			is_deleted = 0;
	</select>
	
	<select id="getThirdBeginAndEndPostno" resultType="com.letsparty.dto.BeginEndPostNo">
		SELECT
		    IFNULL(
		        (SELECT post_no 
		        FROM post 
		        WHERE post_no &lt; #{postNo} 
		        AND party_no = #{partyNo} 
		        AND is_deleted = 0 
		        ORDER BY post_no DESC 
		        LIMIT 2, 1),
		        (SELECT MIN(post_no) FROM post WHERE party_no = #{partyNo} AND is_deleted = 0)
		    ) as beginNo,
		    IFNULL(
		        (SELECT post_no 
		        FROM post 
		        WHERE post_no &gt; #{postNo}
		        AND party_no = #{partyNo}
		        AND is_deleted = 0 
		        ORDER BY post_no 
		        LIMIT 2, 1),
		        (SELECT MAX(post_no) FROM post WHERE party_no = #{partyNo} AND is_deleted = 0)
		    ) as endNo;
	</select>
	
	<update id="updatePost" parameterType="Post">
		UPDATE post
		SET 
			post_title = #{title},
			post_content = #{content},
			post_read_cnt = #{readCnt},
			post_comment_cnt = #{commentCnt},
			is_deleted = #{deleted},
			is_notification = #{notification}
		WHERE
			party_no = #{party.no}
		AND
			post_no = #{no}
	</update>
	
</mapper>